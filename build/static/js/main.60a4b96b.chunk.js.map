{"version":3,"sources":["components/Header.js","components/Error.js","components/Formulario.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","mensaje","Formulario","busqueda","guardarBusqueda","guardarConsultar","useState","error","guardarError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","htmlFor","type","id","onChange","Clima","resultado","main","parseFloat","temp","toFixed","temp_max","temp_min","App","componete","consultar","guardarResultado","useEffect","consultarAPI","a","url","fetch","respuesta","json","result","cod","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.60a4b96b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Header = ({ titulo }) => {\n  return (\n    <nav>\n      <div className='nav-wrapper light-blue darken-2'>\n        <a href='#!' className='brand-logo'>\n          {titulo}\n        </a>\n      </div>\n    </nav>\n  );\n};\n\nHeader.propTypes = {\n  titulo: PropTypes.string.isRequired\n};\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Error = ({ mensaje }) => {\n  return <p className='red darken-4 error'>{mensaje}</p>;\n};\n\nError.propTypes = {\n  mensaje: PropTypes.string.isRequired\n};\nexport default Error;\n","import React, { useState } from \"react\";\nimport Error from \"./Error\";\nimport PropTypes from \"prop-types\";\n\nconst Formulario = ({ busqueda, guardarBusqueda, guardarConsultar }) => {\n  //state del formulario c\n  // const [busqueda, guardarBusqueda] = useState({\n  //   ciudad: \"\",\n  //   pais: \"\"\n  // });\n\n  //otro state de error\n  const [error, guardarError] = useState(false);\n\n  //extraer ciudad y pais del state\n  const { ciudad, pais } = busqueda;\n\n  //funcion que coloca los elementos en el state\n  const handleChange = (e) => {\n    //actualizar el state\n    guardarBusqueda({\n      ...busqueda,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  //cuando el usuarip da submit\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(\"presionado\");\n\n    //validar\n    if (ciudad.trim() === \"\" || pais.trim() === \"\") {\n      guardarError(true);\n      return;\n    }\n    guardarError(false);\n    //pasarlo al componente principal\n    guardarConsultar(true);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      {error ? <Error mensaje='Ambos campos son obligatorios' /> : null}\n      <div className='input-field  col s12'>\n        <label htmlFor='ciudad'>Ciudad: </label>\n        <input\n          type='text'\n          name='ciudad'\n          id='ciudad'\n          value={ciudad}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className='input-field col s12'>\n        <select name='pais' id='pais' value={pais} onChange={handleChange}>\n          <option value=''>--Seleccione un pais--</option>\n          <option value='US'>Estados Unidos</option>\n          <option value='MX'>México</option>\n          <option value='AR'>Argentina</option>\n          <option value='CO'>Colombia</option>\n          <option value='CR'>Costa Rica</option>\n          <option value='ES'>España</option>\n          <option value='PE'>Perú</option>\n        </select>\n        <label htmlFor='pais'>Pais: </label>\n      </div>\n\n      <div className='input-field col s12'>\n        <button\n          type='submit'\n          value='Buscar Clima'\n          className='waves-effect waves-light btn-large btn-block yellow accent-4'\n        >\n          Buscar clima\n        </button>\n      </div>\n    </form>\n  );\n};\n\nFormulario.propTypes = {\n  busqueda: PropTypes.object.isRequired,\n  guardarBusqueda: PropTypes.func.isRequired,\n  guardarConsultar: PropTypes.func.isRequired\n};\n\nexport default Formulario;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Clima = ({ resultado }) => {\n  //extraer los valores\n  const { main, name } = resultado;\n\n  if (!name) return null;\n\n  //grados kelvin\n  const kelvin = 273.15;\n\n  return (\n    <div className='card-panel white col s12'>\n      <div className='black-text'>\n        <h2>El clima de {name}: </h2>\n        <p className='temperatura'>\n          {parseFloat(main.temp - kelvin, 10).toFixed(2)} <span> &#x2103;</span>\n        </p>\n        <p>\n          Temperatura maxima:\n          {parseFloat(main.temp_max - kelvin, 10).toFixed(2)}{\" \"}\n          <span> &#x2103;</span>\n        </p>\n        <p>\n          Temperatura minima:\n          {parseFloat(main.temp_min - kelvin, 10).toFixed(2)}{\" \"}\n          <span> &#x2103;</span>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nClima.propTypes = {\n  resultado: PropTypes.object.isRequired\n};\nexport default Clima;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Formulario from \"./components/Formulario\";\nimport Clima from \"./components/Clima\";\nimport Error from \"./components/Error\";\n\nfunction App() {\n  const [busqueda, guardarBusqueda] = useState({\n    ciudad: \"\",\n    pais: \"\"\n  });\n\n  const { ciudad, pais } = busqueda;\n\n  const [consultar, guardarConsultar] = useState(false);\n  const [resultado, guardarResultado] = useState({});\n  const [error, guardarError] = useState(false);\n\n  useEffect(() => {\n    const consultarAPI = async () => {\n      if (consultar === true) {\n        const APIKEY = \"59bcf9d35096032d7b662cd87b26f0d5\";\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${APIKEY}`;\n\n        const respuesta = await fetch(url);\n        const result = await respuesta.json();\n        guardarResultado(result);\n        guardarConsultar(false);\n      }\n    };\n\n    if (resultado.cod === \"404\") {\n      guardarError(true);\n    } else {\n      guardarError(false);\n    }\n\n    consultarAPI();\n    //eslint-disable-next-line\n  }, [consultar]);\n\n  let componete;\n\n  if (error) {\n    componete = <Error mensaje='No hay resultados' />;\n  } else {\n    componete = <Clima resultado={resultado} />;\n  }\n\n  return (\n    <Fragment>\n      <Header titulo='Clima React App' />\n\n      <div className='contenedor-form'>\n        <div className='container'>\n          <div className='row'>\n            <div className='col m6 s12'>\n              <Formulario\n                busqueda={busqueda}\n                guardarBusqueda={guardarBusqueda}\n                guardarConsultar={guardarConsultar}\n              />\n            </div>\n            <div className='col m6 s12'>{componete}</div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}